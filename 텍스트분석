# 텍스트 분석 이해

텍스트 분석은 비정형 데이터인 텍스트를 분석하는 것이다. 머신러닝 알고리즘은 숫자형의 피처 기반 데이터만 입력받을 수 있기 때문에 텍스트를 머신러닝에 적용하기 위해서는 비정형 텍스트 데이터를 어떻게든 피처 형태로 추출하고 추출된 피처에 의미 있는 값을 부여하는가 하는 것이 매우 중요한 요소이다.
대표적으로 텍스트를 피처 벡터화 하는 방법에는 BOW(Bag of Words), Word2Vec 방법이 있다. 이런 분석 패키지로는 NLTK, Genism, SpaCy



# 텍스트 분석 수행 프로세스

1) 텍스트 전처리
- 대/소문자 변경, 특수문자 삭제 등의 클렌징 작업, 단어 등의 토큰화 작업, 의미 없는 단어 제거 작업, 어근 추출(Stemming/Lemmatization)
- 클렌징: 분석에 방해가 되는 불필요한 문자, 기호 등을 사전에 제거하는 작업. 예를 들면 HTML, XML 태그나 특정 기호 등을 사전에 제거.
- 텍스트 토큰화: 문서에서 문장을 분리하는 문장 토큰화, 문장에서 단어를 토큰으로 분리하는 단어 토큰화로 나뉠 수 있다.
- 스톱 워드(Stop Word) 제거: Stop Word는 분석에 큰 의미가 없는 단어를 지칭한다. 가령 영어에서 is, the, a, will 등 문장을 구성하는 필수 문법 요소이지만 문맥적으로 큰 의미가 없는 단어가 이에 해당한다. 
- 어근 추출(Stemming, Lemmatization): ex) worked, working, works  ‘work’ Lemmatization은 Stemming에 비해 품사와 같은 문법적인 요소와 더 의미적인 부분을 감안해 더 정확한 어근을 찾아준다.

2) 피처 벡터화/추출
- 가공된 텍스트에서 피처를 추출하고 여기에 벡터 값을 할당한다. BOW, Word2Vec 방법이 있다. BOW에는 Count 기반과 TF-IDF 기반 벡터화가 있다.

3) ML 모델 수립 및 학습/ 예측 평가
- 피처 벡터화된 데이터 세트에 ML 모델을 적용해 학습/예측 및 평가를 수행.




# Bag of Words(BOW)

- 문서가 가지는 모든 단어를 문맥이나 순서를 무시하고 일괄적으로 단어에 대해 빈도 값을 부여해 피처 값을 추출하는 모델.
장점: 쉽고 빠른 구축으로 예상보다 문서의 특징을 잘 나타낼 수 있는 모델이다.
단점
1) 문맥 의미 반영 부족(Semantic Context): 단어의 순서를 고려하지 않기 때문에 문장 내에서 단어의 문맥적인 의미가 무시된다. 이를 보완하기 위해 n_gram 기법을 활용할 수 있지만 제한적이다.
2) 희소 행렬 문제(희소성, 희소 행렬): BOW로 피처 벡터화를 수행하면 희소 행렬 형태의 데이터 세트가 만들어지기 쉽다. 하나의 문서에는 매우 많은 단어로 구성되어 있기 때문에 대부분의 단어 데이터들이 0으로 채워지는 행렬이 된다. 이러한 희소 행렬(Sparse Matrix)는 ML 알고리즘의 수행 시간과 예측 성능을 떨어뜨린다.


# TF-IDF(Term Frequency Inverse Document Frequency)

- 개별 문서에서 자주 나타나는 단어에 높은 가중치를 주되, 모든 문서에서 전반적으로 자주 나타나는 단어에 대해서는 penalty를 주는 방식으로 값을 부여하는 것.
- 단어가 다른 문서에도 자주 나타나는 단어라면 해당 문서는 언어 특성상 범용적으로 자주 사용되는 단어일 가능성이 높은 것. Ex) ‘많은’, ‘빈번하게’, ‘당연히’ 등 과 같은 단어는 문서의 특징과는 관련성이 적지만 보편적으로 많이 사용하기 때문에 문서에 반복적으로 사용될 가능성이 높다.
- 따라서, Count 방식보다 TF-IDF 방식이 더 좋은 예측 성능을 보장할 수 있다.



# Scikit-learn의 Count 및 TF-IDF 벡터화 구현: CountVectorizer, TfidVectorizer

1) CountVectorizer: 카운트 기반의 벡터화를 구현한 클래스. 입력 파라미터는 다음과 같다.
max_df: 전체 문서에 걸쳐서 너무 높은 빈도수를 가지는 단어 피처 제외하기 위한 파라미터
min_df: 전체 문서에 걸쳐서 너무 낮은 빈도수를 가지는 단어 피처 제외하기 위한 파라미터
max_features: 추출하는 피처의 개수를 제한하며 정수로 값을 지정.
stop_words: ‘english’로 지정하면 영어의 스톱 워드로 지정
n_gram_range: BOW 모델의 단어 순서를 어느 정도 보강하기 위한 방법. Ex) (1,2) 로 지정하면 토큰화된 단어를 1개씩(minimum,1) 그리고 순서대로 2개씩(maximum2,2) 묶어서 피처로 추출.
analyzer: 피처 추출을 수행한 단위로 지정한다. 당연히 디폴트는 word이다.
token_pattern: 토큰화를 수행하는 정규 표현식 패턴을 지정한다.
tokenizer: 토큰화를 별도의 커스텀 함수로 이용 시 적용한다. 일반적으로 CountTokenizer 클래스에서 어근 변환 시 이를 수행하는 별도의 함수를 tokenizer 파라미터에 적용하면 된다.



# 희소 행렬을 적은 메모리 공간 차지하도록 변환하는 방법

1) COO 형식 (Coordinate:좌표)
- 0이 아닌 데이터만 별도의 데이터 배열에 저장하고, 그 데이터가 가리키는 행과 열의 위치를 별도의 배열로 저장하는 방식. Ex) [[3,0,1],[0,2,0]] 2차원 데이터0이 아닌 데이터[3,1,2] // 0이 아닌 데이터가 있는 위치(row,col) [0,0],[0,2],[1,1] 이것을 별도의 배열로 저장하면 [0,0,1],[0,2,1]

2) CSR (Compressed Sparse Row)
- COO 형식이 행과 열의 위치를 나타내기 위해서 반복적인 위치 데이터를 사용해야 하는 문제점을 해결한 방식이다. 
- 행 위치 배열의 고유한 값의 시작 위치 인덱스를 배열로 생성 (행 위치 배열이 0부터 순차적으로 증가하는 값으로 이뤄졌다는 특성을 고려해서)
